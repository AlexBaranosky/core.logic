h1. Logos

A Logic Programming library for Clojure. At its heart is an implementation of miniKanren as described in William Byrd's dissertation "Relational Programming in miniKanren: Techniques, Applications, and Implementations":http://gradworks.umi.com/33/80/3380156.html. It's also described in great detail in the "The Reasoned Schemer":http://mitpress.mit.edu/catalog/item/default.asp?ttype=2&tid=10663.

h2. About

This library is under heavy development as I cover the ideas in Byrd's thesis and other sources on logic programming. It currently only supports the Clojure 1.3.0 alphas.

There are most certainly bugs. I hope to iron out a solid core version with numerous tests before working on alternate implementations (which will most likely be done in branches).

This is not the first implementation of miniKanren in Clojure. Jim Duey's version can be found "here":https://github.com/jduey/mini-kanren. His work on that got me interested in logic programming in the first place.

h2. Notes

I stayed pretty true to the *structure* of the original implementation. However there's considerable originality to the substitutions implementation and most of the non-trivial core functions have been significantly changed to deal with the fact that Clojure uses a variety of data structures (instead of just lists) to represent source. Also Clojure's cons operator differs significantly from Scheme's so I added the LConsSeq protocol.

The chunk that remains least modified from the implementation found in the dissertation is code related to goals and goal constructors. There's quite a bit of clever macro magic there which makes miniKanren code efficient. However I am planning on replacing this code with high performance original work.

h2. Goals

* Simplicity. Optimizations should not destroy the *ideas* behind the original design. Any person willing to take take the time to understand the original Scheme implementation should have little trouble understanding how Logos is put together.
* Performance. The Scheme version is quite fast. This implementation is competitive and and on many operations it's considerably faster.
* Emphasis on pure relational programming.
* Parallel logic programming.
* Original implementation. All key elements will be changed to make Logos miniKanren as idiomatic and as high performance as possible.

h2. Contributing

I will only take contributions from people who have submitted Clojure CAs.

h2. Examples

<pre>
(run* [q]
  (rest-o q [1 2])) ; [(_.0 1 2)]
</pre>

<pre>
(run 5 [x]
  (exist [y]
    (append-o (llist 'cake y) '(d t) x)))

;; [(cake _.0 d t)
;;  (cake _.0 _.1 d t)
;;  (cake _.0 _.1 _.2 d t)
;;  (cake _.0 _.1 _.2 _.3 d t)
;;  (cake _.0 _.1 _.2 _.3 _.4 d t)]
</pre>

<pre>
(defn likes [x y]
  (cond-e
   ((== x 'john) (== y 'mary))
   ((== x 'mary) (== y 'john))))

(defn musician [x]
  (cond-e
   ((== x 'john))
   ((== x 'bob))))

(run* [q]
  (likes q 'mary)
  (musician q)) ;; [john]

(run* [q]
  (musician q)) ;; [john bob]

(run* [q]
  (exist [x y]
    (likes x y)
    (== [x y] q))) ;; [[john mary] [mary john]]
</pre>

<pre>
(unifier' '(?x ?y ?z) '(1 2 ?y)) ; (1 2 _.0)
</pre>

The above is quite slow since we have to walk the data structure and replace the logic var symbols. It's more efficient to <code>prep</code> the expressions before hand if you're going to be unifying the same expressions over and over again.

<pre>
(let [[u w] (map prep ['(?x ?y) (1 2)])]
  (unifier u w))
</pre>
